local smb = require "smb"
local nmap = require "nmap"
local vulns = require "vulns"

description = [[
  Microsoft SMBv3 contains a vulnerability in the handling of compression, which may allow a remote, 
  unauthenticated attacker to execute arbitrary code on a vulnerable system.
  Microsoft Server Message Block 3.1.1 (SMBv3) contains a vulnerability in the way that it handles connections that use compression. 
  This vulnerability may allow a remote, unauthenticated attacker to execute arbitrary code on a vulnerable system. 
  It has been reported that this vulnerability is "wormable."
  By connecting to a vulnerable Windows machine using SMBv3, or by causing a vulnerable Windows system to initiate a client connection to a SMBv3 server, 
  a remote, unauthenticated attacker to execute arbitrary code with SYSTEM privileges on a vulnerable system.

  we're wating 
]]


author = "Hossam Mohamed"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"safe", "discovery"}

hostrule = function(host)
  return smb.get_port(host) ~= nil
end

action = function(host,port)
  local status, supported_dialects, overrides
  overrides = {}
  status, supported_dialects = smb.list_dialects(host, overrides)
  local vuln_status, err
  local vuln = {
      title = "Microsoft SMBv3 compression remote code execution vulnerability",
      IDS = {CVE = 'CVE-2020-0796'},
      risk_factor = "HIGH",
      description = [[
        Microsoft SMBv3 contains a vulnerability in the handling of compression, which may allow a remote, unauthenticated attacker to execute arbitrary code on a vulnerable system.
      ]],
      references = {
      'https://portal.msrc.microsoft.com/en-us/security-guidance/advisory/ADV200005'
      },
      dates = {
      disclosure = {year = '2020', month = '03', day = '11'},
      }
  }
  local report = vulns.Report:new(SCRIPT_NAME, host, port)
  vuln.state = vulns.STATE.NOT_VULN
  if status then
    for i, v in pairs(supported_dialects) do -- Mark SMBv1 as insecure
      if v == "3.11" then
        vuln.state = vulns.STATE.VULN
      end
    end
  end
  return report:make_output(vuln)

end
